package org.secuso.privacyfriendlyweather.weather_api;

import android.content.Context;
import android.widget.Toast;

import com.android.volley.VolleyError;
import com.j256.ormlite.dao.Dao;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.secuso.privacyfriendlyweather.R;
import org.secuso.privacyfriendlyweather.orm.City;
import org.secuso.privacyfriendlyweather.orm.CurrentWeatherData;
import org.secuso.privacyfriendlyweather.orm.DatabaseHelper;
import org.secuso.privacyfriendlyweather.ui.UiUpdater;

import java.sql.SQLException;

/**
 * This class processes the HTTP requests that are made to the OpenWeatherMap API requesting the
 * current weather for all stored cities.
 */
public class ProcessOwmUpdateCityListRequest implements IProcessHttpRequest {

    /**
     * Constants
     */
    private final String DEBUG_TAG = "process_update_list";

    /**
     * Member variables
     */
    private Context context;
    private DatabaseHelper dbHelper;

    /**
     * Constructor.
     *
     * @param context The context of the HTTP request.
     */
    public ProcessOwmUpdateCityListRequest(Context context, DatabaseHelper dbHelper) {
        this.context = context;
        this.dbHelper = dbHelper;
    }

    /**
     * @param item An entry of the 'list' JSON object; the list is generated by the the
     *             OpenWeatherMap API when querying multiple cities.
     * @return Returns an instance of CurrentWeatherData that is filled with the data provided by
     * item.
     * @throws JSONException This exception will be thrown in case some value cannot be converted
     *                       to the expected type.
     */
    private CurrentWeatherData extractDataForItem(JSONObject item) throws JSONException {
        CurrentWeatherData weatherData = new CurrentWeatherData();

        weatherData.setTimestamp(item.getLong("dt"));

        JSONArray jsonWeatherArray = item.getJSONArray("weather");
        JSONObject jsonWeather = new JSONObject(jsonWeatherArray.get(0).toString());
        weatherData.setWeatherID(jsonWeather.getInt("id"));
        weatherData.setWeatherCategory(jsonWeather.getString("main"));
        weatherData.setWeatherDescription(jsonWeather.getString("description"));

        JSONObject jsonMain = item.getJSONObject("main");
        weatherData.setTemperatureCurrent((float) jsonMain.getDouble("temp"));
        weatherData.setTemperatureMin((float) jsonMain.getDouble("temp_min"));
        weatherData.setTemperatureMax((float) jsonMain.getDouble("temp_max"));
        weatherData.setHumidity((float) jsonMain.getDouble("humidity"));
        weatherData.setPressure((float) jsonMain.getDouble("pressure"));

        JSONObject jsonWind = item.getJSONObject("wind");
        weatherData.setWindSpeed((float) jsonWind.getDouble("speed"));
        weatherData.setWindDirection((float) jsonWind.getDouble("deg"));

        JSONObject jsonClouds = item.getJSONObject("clouds");
        weatherData.setCloudiness((float) jsonClouds.getDouble("all"));

        JSONObject jsonSunRiseSet = item.getJSONObject("sys");
        weatherData.setTimeSunrise(jsonSunRiseSet.getLong("sunrise"));
        weatherData.setTimeSunset(jsonSunRiseSet.getLong("sunset"));

        return weatherData;
    }

    /**
     * Converts the response to JSON and updates the database so that the latest weather data are
     * displayed.
     *
     * @param response The response of the HTTP request.
     */
    @Override
    public void processSuccessScenario(String response) {
        try {
            JSONObject json = new JSONObject(response);
            JSONArray list = json.getJSONArray("list");
            for (int i = 0; i < list.length(); i++) {
                JSONObject item = new JSONObject(list.get(i).toString());
                CurrentWeatherData weatherData = extractDataForItem(item);
                weatherData.setCity(dbHelper.getCityByCityID(item.getInt("id")));
                // TODO: Handle the case when the city is null: Extract the data from the response and create a new City record
                dbHelper.getCurrentWeatherDataDao().create(weatherData);

                // Update the UI
                UiUpdater uiUpdater = new UiUpdater(context, dbHelper);
                uiUpdater.updateCityList();
            }
        } catch (JSONException | SQLException e) {
            e.printStackTrace();
            String errorMsg = "";
            if (e instanceof JSONException) {
                errorMsg = context.getResources().getString(R.string.convert_to_json_error);
            } else {
                errorMsg = context.getResources().getString(R.string.insert_into_db_error);
            }
            Toast.makeText(context, errorMsg, Toast.LENGTH_LONG).show();
        }
    }

    /**
     * Shows an error that the data could not be retrieved.
     *
     * @param error The error that occurred while executing the HTTP request.
     */
    @Override
    public void processFailScenario(VolleyError error) {

    }

}
