package org.secuso.privacyfriendlyweather.weather_api.open_weather_map;

import android.content.Context;
import android.widget.Toast;

import com.android.volley.VolleyError;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.secuso.privacyfriendlyweather.R;
import org.secuso.privacyfriendlyweather.orm.CurrentWeatherData;
import org.secuso.privacyfriendlyweather.orm.DatabaseHelper;
import org.secuso.privacyfriendlyweather.ui.UiUpdater;
import org.secuso.privacyfriendlyweather.weather_api.IApiToDatabaseConversion;
import org.secuso.privacyfriendlyweather.weather_api.IDataExtractor;
import org.secuso.privacyfriendlyweather.weather_api.IProcessHttpRequest;

import java.sql.SQLException;

/**
 * This class processes the HTTP requests that are made to the OpenWeatherMap API requesting the
 * current weather for all stored cities.
 */
public class ProcessOwmAddCityToListRequest implements IProcessHttpRequest {

    /**
     * Constants
     */
    private final String DEBUG_TAG = "process_add_list_item";

    /**
     * Member variables
     */
    private Context context;
    private DatabaseHelper dbHelper;

    /**
     * Constructor.
     *
     * @param context The context of the HTTP request.
     */
    public ProcessOwmAddCityToListRequest(Context context, DatabaseHelper dbHelper) {
        this.context = context;
        this.dbHelper = dbHelper;
    }

    /**
     * @param jsonData An entry of the 'list' JSON object; the list is generated by the the
     *                 OpenWeatherMap API when querying multiple cities.
     * @return Returns an instance of CurrentWeatherData that is filled with the data provided by
     * jsonData.
     * @throws JSONException This exception will be thrown in case some value cannot be converted
     *                       to the expected type.
     */
    private CurrentWeatherData extractData(JSONObject jsonData) throws JSONException {
        CurrentWeatherData weatherData = new CurrentWeatherData();

        weatherData.setTimestamp(jsonData.getLong("dt"));

        IApiToDatabaseConversion conversion = new OwmToDatabaseConversion();
        JSONArray jsonWeatherArray = jsonData.getJSONArray("weather");
        JSONObject jsonWeather = new JSONObject(jsonWeatherArray.get(0).toString());
        weatherData.setWeatherID(conversion.convertWeatherCategory(jsonWeather.getString("id")));
        weatherData.setWeatherCategory(jsonWeather.getString("main"));
        weatherData.setWeatherDescription(jsonWeather.getString("description"));

        JSONObject jsonMain = jsonData.getJSONObject("main");
        weatherData.setTemperatureCurrent((float) jsonMain.getDouble("temp"));
        weatherData.setTemperatureMin((float) jsonMain.getDouble("temp_min"));
        weatherData.setTemperatureMax((float) jsonMain.getDouble("temp_max"));
        weatherData.setHumidity((float) jsonMain.getDouble("humidity"));
        weatherData.setPressure((float) jsonMain.getDouble("pressure"));

        JSONObject jsonWind = jsonData.getJSONObject("wind");
        weatherData.setWindSpeed((float) jsonWind.getDouble("speed"));
        weatherData.setWindDirection((float) jsonWind.getDouble("deg"));

        JSONObject jsonClouds = jsonData.getJSONObject("clouds");
        weatherData.setCloudiness((float) jsonClouds.getDouble("all"));

        JSONObject jsonSunRiseSet = jsonData.getJSONObject("sys");
        weatherData.setTimeSunrise(jsonSunRiseSet.getLong("sunrise"));
        weatherData.setTimeSunset(jsonSunRiseSet.getLong("sunset"));

        return weatherData;
    }

    /**
     * Converts the response to JSON and updates the database so that the latest weather data are
     * displayed.
     *
     * @param response The response of the HTTP request.
     */
    @Override
    public void processSuccessScenario(String response) {
        IDataExtractor extractor = new OwmDataExtractor();
        CurrentWeatherData weatherData = extractor.extractCurrentWeatherData(response);
        int cityId = extractor.extractCityID(response);
        // Error case :/
        if (weatherData == null || cityId == Integer.MIN_VALUE) {
            final String ERROR_MSG = context.getResources().getString(R.string.convert_to_json_error);
            Toast.makeText(context, ERROR_MSG, Toast.LENGTH_LONG).show();
        } else {
            // TODO: Handle the case when the city is null: Extract the data from the response and create a new City record
            weatherData.setCity(dbHelper.getCityByCityID(cityId));
            try {
                dbHelper.getCurrentWeatherDataDao().create(weatherData);
                // Update the UI
                UiUpdater uiUpdater = new UiUpdater(context, dbHelper);
                uiUpdater.addItemToOverview(weatherData);
                // Show success message
                final String SUCCESS_MSG = context.getResources().getString(R.string.dialog_add_added_successfully_template);
                Toast.makeText(context, SUCCESS_MSG, Toast.LENGTH_LONG).show();
            } catch (SQLException e) {
                e.printStackTrace();
                final String ERROR_MSG = context.getResources().getString(R.string.insert_into_db_error);
                Toast.makeText(context, ERROR_MSG, Toast.LENGTH_LONG).show();
            }
        }
    }

    /**
     * Shows an error that the data could not be retrieved.
     *
     * @param error The error that occurred while executing the HTTP request.
     */
    @Override
    public void processFailScenario(VolleyError error) {

    }

}
